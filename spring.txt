과거 메이븐 요즘 그레이들

라이브러리 추가
웹 -> spring web
템플릿 엔진 -> thymeleaf

main, test가 나뉘어져있다.

요즘 개발 트렌드에서 test 굉장히 중요하다

스프링 부트가 등장하고 스프링 설정이 굉장히 쉬워짐

인텔리제이 jdk 설정
https://blog.naver.com/PostView.naver?
blogId=tofhadl529&logNo=222374497101&
from=search&redirect=Log&widgetTypeCall=true&directAccess=false

인텔리제이는 톰캣 라이브러리를 가지고 있다.(embeded)
예전 처럼 톰캣 서버를 깔고 그러지 않아도 된다.

현업에선 syso가 아닌 log로 출력해야된다.
starter-logging에서 logback을 많이쓴다. vs slf4j
test는 junit으로, mockito와 assertj는 test 도와주는 라이브러리


웹앱에서 첫번째 진입점이 컨트롤러다

C:\Users\82105\Desktop\workspace\inflearn\hello-spring
git bash 켜서 ./gradlew build 입력
build/libs/hello-spring-0.0.1-SNAPSHOT.jar 생성
서버 배포할때는 jar 파일만 복사해가지고 서버에 넣어주고
실행시키면 됨

과거에는 톰캣을 서버에 설치하고 war 만들고 했어야함

웹의 개발 방식.
1. 정적 컨텐츠 : 파일을 그대로 웹브라우저에
2. MVC와 템플릿 엔진 : 과거의 JSP, PHP 이런것들이 소위 말하는 템플릿 엔진
html을 그냥 주는 게 아니라 서버에서 프로그래밍해서 html을 동적으로
바꿔서 내리는거
3. API : 과거엔 xml도 썼는데 json 데이터 구조 포맷으로 클라이언트로 전달

view는 화면을 그리는 데 모든 역량을 집중
컨트롤러 모델은 비즈니스로직
요즘 MVC는 기본이다

ResponseBody 사용 원리
R.B가 없다면 스프링 컨테이너에서 얘를 viewResolver를 통해
템플릿을 찾아가도록 하지만
있다면 HTTP로 바로 넘겨야겠다고 결정함
리졸버대신 HttpMessageConverter가 동작
JsonConverter vs StringConverter (다양한게있음)
그런데 문자가 아니라 객체일떄
default가 객체를 JSON 형태로 만들어서 응답하겠다

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

멤버 컨트롤러가,
멤버 서비스를 통해서 회원가입 하고,
멤버 서비스를 통해서 데이터를 조회할수 있고,
이러한 관계를 컨트롤러가 멤버 서비스를 의존한다고 말한다.

스프링에선 컨테이너에 사용할 빈을 등록한다.
컴포넌트 스캔과 자동 의존관계 설정

컴포넌트 스캔
@Controller
@Service
@Repository
되게 정형화 된 패턴이다.
그래서 스프링에서 다 등록되어있는 어노테이션임.

자동 의존관계
Autowried
스프링 빈으로 등록되어있어야 동작함


두번째 방법 (스프링 빈등록)
자바 코드로 직접 스프링 빈 등록

컴포넌트 등록할떈 
@SpringBootApplication 클래스의
main 실행 파일 하위 패키지만 대상이 된다.

등록될 떄 스프링 빈은 기본적으로 싱글톤으로 등록됨

의존 관계가 실행중에 동적으로 변하는 경우는
거의 없으므로 생성자 주입을 권장한다. (아예 없다고 보면됨)

실무에선 컴포넌트 스캔을 사용한다고 보면 된다

정형화되지 않거나, 상황에 따라 구현 클래스를 변경해야 하면
설정을 통해 스프링 빈으로 등록한다.

현재 데이터 저장소가 선정되지 않아
 우선 인터페이스로 구현 클래스를 변경할 수 있도록 설계 했다
이 방식 덕분에 나중에 MemoryMemberRepository를 다른 걸로 변경하면
MemberService는 굳이 건드리지 않고도 인터페이스 덕에 
구현클래스 변경만으로 모든 걸 해결할 수 있는 것이다.

index.html이 바로 안나오고 home.html이 나오는 이유
톰캣 서버는 웹 브라우저에서 url 요청을 받았을때
첫 번째로 스프링 컨테이너 내부를 뒤져본다.
이후로 없다면 static 패키지의 파일을 찾는다.

shift delete 행삭제

DB 생성중엔 sql 문 만들어서 기록을 정리해라

스프링 프레임워크를 사용하여 JDBC를 다룰떈
Datasource, DataUtils라는 게 사용됨.
똑같이 컨테이너에서 관리함.
SpringConfig에서 정의해둔 MemberRepository 반환에
JDBC 생성자로만 바꿔주면 된다.

객체 지향적 설계가 왜 좋다하는가
다형성을 활용한다
스프링은 이게 굉장히 편리하게 되도록 
스프링 컨테이너가 이걸 지원해준다
여기에 DI까지 더해져서

아 원래라면 dao다루는 모든 곳을 가서 생성자를 바꿔줘야되는데
SpringConfig 하나만 바꿔도 다 바꿔진 거다.
OCP 원칙이 지켜졌다.

Test는 가장 편하고 알아보기 쉽게 작성하면 된다.

컨테이너가 개입안하면 단위테스트 개입하면 통합테스트
가급적이면 단위테스트가 더 좋은 테스트임

jpa는 인터페이스가
구현 기술중에 하이버네이트가 있다.
































